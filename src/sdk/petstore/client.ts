// Generated by openapi-ts-gen. DO NOT EDIT
/* eslint-disable */
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

import * as schemas from "./schemas";

export class PetstoreAPIClient {
  public client: AxiosInstance;
  constructor(client: AxiosInstance) {
    if (!client.defaults.baseURL) {
      throw new Error("client's baseURL MUST specified");
    }
    this.client = client;
  }
  hello = (req: schemas.HelloRequest, config: AxiosRequestConfig = {}): Response<schemas.HealthCheckResult> => {
    return this.client.request({
      ...config,
      url: `/hello`, 
      method: "get", 
    })
  }
  createPet = (req: schemas.CreatePetRequest, config: AxiosRequestConfig = {}): Response<schemas.Pet> => {
    return this.client.request({
      ...config,
      url: `/pet`, 
      method: "post", 
      data: req.body
    })
  }
  listPets = (req: schemas.ListPetsRequest, config: AxiosRequestConfig = {}): Response<schemas.Pet[]> => {
    return this.client.request({
      ...config,
      url: `/pet`, 
      method: "get", 
    })
  }
  getPet = (req: schemas.GetPetRequest, config: AxiosRequestConfig = {}): Response<schemas.Pet> => {
    checkPathParams("getPet", req, ["id"])
    return this.client.request({
      ...config,
      url: `/pet/${req.id}`, 
      method: "get", 
    })
  }
  updatePet = (req: schemas.UpdatePetRequest, config: AxiosRequestConfig = {}): Response<schemas.Pet> => {
    checkPathParams("updatePet", req, ["id"])
    return this.client.request({
      ...config,
      url: `/pet/${req.id}`, 
      method: "patch", 
      data: req.body
    })
  }
  deletePet = (req: schemas.DeletePetRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deletePet", req, ["id"])
    return this.client.request({
      ...config,
      url: `/pet/${req.id}`, 
      method: "delete", 
    })
  }
  createStore = (req: schemas.CreateStoreRequest, config: AxiosRequestConfig = {}): Response<schemas.Store> => {
    return this.client.request({
      ...config,
      url: `/store`, 
      method: "post", 
      data: req.body
    })
  }
  listStore = (req: schemas.ListStoreRequest, config: AxiosRequestConfig = {}): Response<schemas.Store[]> => {
    return this.client.request({
      ...config,
      url: `/store`, 
      method: "get", 
      params: pick(req, ["type", "_limit", "_offset", "_sort", "create_at_gte", "create_at_lte", "name"])
    })
  }
}

type Response<T> = Promise<AxiosResponse<T>>
type Dict = Record<string, any>;

function checkPathParams(op: string, req: Dict, ks: string[]) {
  ks.forEach((p) => {
    if (!req[p]) {
      throw new Error(`${p} is required for ${op}`)
    }
  })
}

function pick(o: Dict, ks: string[]) {
  return ks.reduce((r, p) => {
    r[p] = o[p];
    return r;
  }, {} as Dict)
}
